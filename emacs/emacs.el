;; stop startup screen!
(setq inhibit-startup-screen t)

;; automatically follow symlinks if under version control
(setq vc-follow-symlinks t)

;; auto revert mode (will automatically update changed buffers)
(global-auto-revert-mode t)

;; scroll bar on right
(when (featurep 'aquamacs)
  (set-scroll-bar-mode 'right))

;; set fill column to a usable value
(setq-default fill-column 90)

;; ediff horizontally
(setq ediff-split-window-function 'split-window-horizontally)

;; overwrite selected text
(delete-selection-mode 1)

;; display column no.
(setq column-number-mode t)

;; applescript-mode
(require 'applescript-mode nil 'noerror)
(add-to-list 'auto-mode-alist '("\.applescript$" . applescript-mode))
(add-to-list 'interpreter-mode-alist '("osascript" . applescript-mode))

;; ESS
(require 'ess-site nil 'noerror)

;;;;; AUCTEX
;; underlines spelling
(require 'tex-site nil 'noerror)


;; (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
;; (setq TeX-view-program-list
;;      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  

(add-hook 'LaTeX-mode-hook 'flyspell-mode)
;; load reftex
(require 'reftex nil 'noerror)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)

;; various settings for reftex
(setq reftex-label-alist
        '(("theorem" ?a "thm:" "~\\ref{%s}" t ("theorem" "th."))
          ("lemma" ?a "lem:" "~\\ref{%s}" t ("lemma" "lem."))
          ("corollary" ?a "cor:" "~\\ref{%s}" t ("corollary" "cor."))
          ("proposition" ?a "prp:" "~\\ref{%s}" t ("proposition" "prp."))
          ("definition" ?d "dfn:" "~\\ref{%s}" t ("definition" "dfn."))
          ("example" ?d "exm:" "~\\ref{%s}" t ("example" "exm."))))
(add-hook 'LaTeX-mode-hook
        (lambda ()
          (LaTeX-add-environments
            '("thm" LaTeX-env-label)
            '("lem" LaTeX-env-label)
            '("cor" LaTeX-env-label)
            '("prp" LaTeX-env-label)
            '("dfn" LaTeX-env-label)
            '("exm" LaTeX-env-label))))


(setq reftex-cite-format "\\textcite{%l}")
(setq reftex-default-bibliography '("~/Library/texmf/bibtex/bib/simon/global.bib"))

;; automatically save on TeX compile
(setq TeX-save-query nil) 

;; auctex stuff for parsing the buffer
;; makes AMS completion work for simon.sty
(setq TeX-auto-save t) ; parse document on load
(setq TeX-parse-self t) ; parse document on save
(setq-default TeX-master nil) ; how to determine which file is master
(setq TeX-auto-local ".auto") ; set path for parsed stuff

;; location of parsed files for user styles
;; these are generated by M-x TeX-auto-generate
;; may need to create directory if it doesn't exist
(setq TeX-auto-private '("~/Library/Application Support/Aquamacs Emacs/auctex/auto/"))

;; Use PDF mode by default
(setq TeX-PDF-mode t)

;; open biblatex files in auctex
(add-to-list 'auto-mode-alist '("\\.bbx\\'" . latex-mode))
(add-to-list 'auto-mode-alist '("\\.cbx\\'" . latex-mode))
;; koma lco files
(add-to-list 'auto-mode-alist '("\\.lco\\'" . latex-mode))

;; user lisp directory
(when (file-readable-p "~/.emacs.d/lisp/")
  (let ((default-directory "~/.emacs.d/lisp/"))
   (normal-top-level-add-subdirs-to-load-path)))

;;;;; JULIA
(add-to-list 'load-path "~/src/julia/contrib/") ;Tell emacs to look for the file there.

(autoload 'julia-mode "julia-mode"
   "Major mode for editing julia files" t)
(add-to-list 'auto-mode-alist '("\\.jl$" . julia-mode))


;; stop emacsclient kill message
;; https://shreevatsa.wordpress.com/2007/01/06/using-emacsclient/
(defun server-remove-kill-buffer-hook () (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)) (add-hook 'server-visit-hook 'server-remove-kill-buffer-hook)

;; markdown mode
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-command-list
   (quote
    (("TeX" "%(PDF)%(tex) %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (plain-tex-mode texinfo-mode ams-tex-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" "makeinfo %(extraopts) %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" "makeinfo %(extraopts) --html %t" TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX" "%(PDF)amstex %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt" "texexec --once --texutil %(extraopts) %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" "texexec %(extraopts) %(execopts)%t" TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
     ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber")
     ("View" "%V" TeX-run-discard-or-function nil t :help "Run Viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
     ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file")
     ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file")
     ("Xindy" "texindy %s" TeX-run-command nil t :help "Run xindy to create index file")
     ("Check" "lacheck %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("ChkTeX" "chktex -v6 %s" TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for common mistakes")
     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
     ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
 '(safe-local-variable-values (quote ((TeX-master . t)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
